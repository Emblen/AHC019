3/23 
14:30
目標：サンプルプログラムよりも良い解をつくる。1*1*1のブロックを必要最低限用いる解を実装する。
必要な関数など
・ファイル入出力
・解が正しいか判定する。具体的には、ブロックのZX平面(front)とZY平面(right)への正射影がシルエットに一致するかどうか調べる
・片方でしか使用しないブロックの数を調べる。
・ブロックに番号を割り当てる
・ブロックがあってもなくても良い場所
・連結か、干渉していないか
・ブロックの大きさの情報

・単位ブロックを配置する→すでにシルエットを形成できているなら配置しない→連結にする→使わない単位ブロックは隠す

提出1回目：276位
提出2回目：得点計算を勘違いしており、無駄なことをやっていた。2組のシルエットで共有しているブロックの得点は逆数に、共有していないものは逆数にしないということだった。すべて逆数にして足して、共有していないものを追加で足すと思っていた。

287位→232位

シルエットが一致するならば共有可能である。逆は成り立たない。
このシルエットに対応する単位ブロックで、連結である部分を1つのブロックとして扱う。連結判定にはbfsを用いる。unionfindでもいいけど、連結の解除操作ができたほうが良い気がする。

モノキューブを置ける座標を求める
一致する座標を求める
2個以上繋がってるものだけ採用

BFSの概要
すべてのxyzの組について以下を調べる。
共通の座標であればキューに追加
    探索が終了している＝＞すでにブロックを構成している座標である
    探索が終了していない＝＞その座標にはモノキューブがないか、未探索のモノキューブである
キューから1つ座標を取り出す
ブロックとして座標を追加し、ブロックのサイズを1にする。
6方向を探索して面が接していれば新たな探索対象としてキューに追加する。
接している面がなければブロックを削除し、未探索の状態にする
シルエットも記録する。あとでモノキューブで埋めるときに使う。

BFSで共通部分の大きなブロックを構成した後、モノキューブを最低限置くことで課題を達成しようとした。しかし、前の解では無駄なブロックを削る方式だったため、ブロックを配置する関数を書かなくてはいけなくなった(´；ω；｀)

BFSはバグなしで一発で動いた。モノキューブを配置する前の段階をコミットしておく。


ブロックを平面に置き換えて考える。厚さが1のポリキューブの組み合わせのみ考える。こうすると、ZX平面、XY平面、YZ平面でシルエットに合致するものを選んでいけば良いので実装がわかりやすい。

2 3
1 1 1
0 1 0

monocubeの情報にブロックの番号を追加してはどうか